worker_processes auto;
worker_rlimit_nofile 100000;

user root;
    # 'user nobody nobody;' for systems with 'nobody' as a group instead
    error_log  /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

events {
   worker_connections 2048;    # increase if you have lots of clients
   accept_mutex on;            # set to 'on' if nginx worker_processes > 1
   use epoll;
   # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  default_type application/octet-stream;
  server_tokens off;
  keepalive_timeout 65;
  sendfile on;
  access_log off;
  error_log /var/log/nginx/error.log crit;

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD

    listen     80 default_server;
    client_max_body_size 4G;
    charset UTF-8;
    server_name localhost;
    root /sunabaco_app;

    # if ($http_x_forwarded_proto != 'http'){
    #   return 301 http://$host$request_uri;
    # }
    # include /etc/nginx/conf.d/*.conf;

    location /health-check {
      access_log off;
      return 200;
      add_header Content-Type text/plain;
    }
 
    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
      proxy_redirect off;
        # proxy_buffering off;
      proxy_pass http://unix:/var/run/gunicorn/gunicorn.sock;
    }


    proxy_intercept_errors on;
    error_page 404             /404.html;
    location = /404.html {
      root /sunabaco_app/sunabaco_book/templates;
    }
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /path/to/app/current/public;
    }
  }
}
